# Intalação Django 2.2.4
#
# Crie um ambiente virtual com conda para instalar o python 3.6
python3 -m venv venv

	# Ative o ambiente
	source venv/bin/activate

	# Instale o Django 2.2.4
	pip install Django


# Criar projeto simplemooc
django-admin.py startproject simplemooc
cd simplemooc

# Rodar o servidor localmente
python manage.py runserver

	# Para acessar a página da aplicação
	# Abre página de parabenização, tudo está OK
	http://127.0.0.1:8000/

# Abra o arquivo settings.py
# Em 'LANGUAGE_CODE', altere 'en-us' para 'pt-br'

# Para criar o banco de dados
python manage.py migrate

# Criando primeira aplicação
python manage.py startapp core
mv core simplemooc

# Criando segunda aplicação
python manage.py startapp courses
mv courses simplemooc

# Instalando biblioteca de gerenciamento de imagem
pip install Pillow

# Registrando a model da aplicação courses e fazendo as migrações de banco
python manage.py makemigrations
python manage.py migrate

# Abrindo o shell do python para Django
python manage.py shell

	# Importando Course
	from simplemooc.courses.models import Course

	# Instanciando a classe
	course = Course()

	# Adicionando informações no banco de dados
	course.name = "Python na Web com Django"

	course.slug = "django"
	
	from datetime import date
	course.start_date = date.today()
	course.save()
	course.id # 1
	course.pk # 1
	course.name # 'Python na Web com Django'

	course.name = "Python com Django"
	course.save()
	course.created_at
	course.updated_at
	course.delete()

# Deletar banco de dados pelo terminal
	No diretório onde tiver o arquivo db.sqlite3, dê rm db.sqlite3

# Criando o banco de dados novamente (removi acima)
	python manage.py migrate

# Criando superusuário
	python manage.py createsuperuser

	# Criar super usuário
		# admin
		# admin@admin.com
		# 1234





	# O diretório 'core' é uma aplicação
	# No aquivo settings.py, informe que existem uma nova aplicação. Em 'INSTALLED_APPS' adicione 'simplemooc.core' na última linha
	# Em urls.py dentro de 'core', adicone esta linha
		url(r'^$', 'simplemooc.core.views.home', name='home'),

	# 'home' ainda não existe, nem adianta rodar o servidor
	# Para criá-la, vá para views.py de core e importe este método
		from django.http import HttpResponse

		# Ainda em views.py, adicone esta função
			def home(request):
				return HttpResponse('Hello World!')

		# Rodar o servidor localmente
		# Após executar essa função, você receberá um 'Hello World' no brownser
			python manage.py runserver


# Introdução as Template Tags de Django
MTV: Model-Template-View
	# Model: persistência no banco de dados
	# Template: forma como os dados serão vistos
	# View: quais dados serão vistos


# Renderizando um Template html em Django
	# Vamos entender o render com o Shell do Django
	python manage.py shell

	# Importando módulos
	from django.template import Template, Context

	# Instanciando a variável 'template'
	template = Template('Bem vindo: {{ usuario }}')

	# Instanciando a variável 'context'
	context = Context({'usuario': 'Pine'})

	# Renderizando a variável 'template'
	print(template.render(context))    # Bem vindo: Pine

	# Aplicando filtros Django na variável renderizada
	template = Template('Bem vindo: {{ usuario|lower }}')

	# Renderizando a variável 'template'
	print(template.render(context))    # Bem vindo: pine

	exit()


# Agora, vamos para a views.py
	# Criar o diretório 'templates' dentro de 'core'
	# Dentro do diretório 'templates', crie o arquivo 'home.html'

	# No arquivo 'home.html', digite
		SIMPLE MOOC
		Usuário: {{ usuario }}

	# Em views.py, no lugar de HttpResponse, coloque:
	return render(request, 'home.html', {'usuario': 'Fulano de Tal'})

	# Rode o servidor
	python manage.py runserver    # SIMPLE MOOC Usuário: Fulano de Tal


# Template Base
# Copie o conteúdo de '/home/pine/Documents/CURSOS_EAD/2_Cursos_online_a_parte/2_Udemy/1_Django_gratuito/Aulas/Aula_8/simplemooc-templates/simplemooc/simplemooc/core/templates/home.html' para o 'home.html' que criamos acima.

	# Rode o servidor
	python manage.py runserver

	# Atualize a página, embora desconfigurada, o conteúdo está OK. O motivo da desconfiguração são: 1) arquivo CSS stático e o endereço web para o PURECSS faltante

	# No arquivo 'home.html', na linha onde existe o texto '<link rel="stylesheet" href="{% static 'css/styles.css' %}" />', 'static' é uma template tag do Django que indica que existe um arquivo estático que deverá ser usado pelo Django. O arquivo CSS estático deverá estar dentro do diretório 'static' da aplicação 'core'

	# Dentro do diretório 'core', crie o diretório 'static'.
	# Copie o diretório '/home/pine/Documents/CURSOS_EAD/2_Cursos_online_a_parte/2_Udemy/1_Django_gratuito/Aulas/Aulas/Aula_8/simplemooc-design/design/css' para o dentro do diretório 'static' que criamos acima.

	# No entanto, para que tudo funcione, temos de fazer uma espécie de importação dos atributos que envolvem a formatação do CSS.

	# Para isso, no arquivo 'home.html', temos de introduzir a template tag '{% load static %}'. Basicamente estamos dizendo ao Django que ele deverá procurar por um diretório 'static' dentro do diretório da aplicação 'core' e renderizar as formatações especificadas no HTML e CSS.

	# Rode o servidor
	python manage.py runserver # Pronto


# Configurando uma página para 'Contato'
# MTV
# Em views.py, crie uma nova função
	def contact(request):
		return render(request, 'contato.html')

	# Da função home(), remova ', {'usuario': 'Fulano de Tal'}'

	# Vá para urls.py e defina a nova url de contact:
		url(r'^contato/$', 'simplemooc.core.views.contact', name='contact'),

	# Neste momento, ainda não existe o template da página contato no diretório 'templates'

	# Então, dentro de 'templates', crie o arquivo 'contato.html' (no forúm de perguntas tem o conteúdo disponível).

	# Novamente, no trecho '<link rel="stylesheet" href="{% static 'css/styles.css' %}" />', a tag 'static' faz com que Django procure por um diretório 'static' e busque por arquivos CSS estáticos dentro do diretório da aplicação 'core'. Isso será possível graças a Template Tag '{% load static %}' no cabeçalho do HTML (igual ao 'home.html').

	# Rode o servidor (ou atualize a página) e tente acessar 'contato'
	python manage.py runserver # Pronto


# Herança de Template
# As páginas Template HTML (home, contato, outros) tem muitos dados iguais, que apenas precisam ser replicados (cabeçalho e rodapé).
# Por este motivo, em Django, existe uma forma de evitar digitação e fazer herança dessas características redundantes.
# Se compararmos o cabeçalho do 'home.html' e 'contato.html', veremos que este trecho é igual:

'''
<!doctype html>
{% load static %}
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Simple MOOC - Uma simples plataforma de ensino a distância" />
    <title>Simple MOOC</title>
    <link rel="stylesheet" href="http://yui.yahooapis.com/pure/0.3.0/pure-min.css">
    <link rel="stylesheet" href="{% static 'css/styles.css' %}" />
</head>
<body>
<div class="header">
    <div class="pure-menu pure-menu-open pure-menu-fixed pure-menu-horizontal">
        <a class="pure-menu-heading" href="">SIMPLE MOOC</a>
        <ul>
            <li class="pure-menu-selected"><a href="base.html">Início</a></li>
            <li><a href="#">Cursos</a></li>
            <li><a href="contact.html">Contato</a></li>
        </ul>
    </div>
</div>
<div class="content">
	*****
    <div class="footer">
        Simple MOOC - Uma simples plataforma de ensino a distância
    </div>
</div>
<script src="http://yui.yahooapis.com/3.12.0/build/yui/yui-min.js"></script>
</body>
</html>
'''

# Esse conteúdo pode ser transferido para um arquivo extra, que chamaremos de 'base.html'. Na região do conteúdo identico onde estiver marcado com '*****', deverá ocorrer a substituição desses caracteres por:

{% block content %}{% endblock %}

# A marcação '{% block content %}{% endblock %}', indica que Django pode colocar conteúdos dinâmicos neste local e replicar o que for estático (header e footer)

# No arquivo 'base.html', apague todo o conteúdo que está no 'base.html'. O arquivo ficará assim:

'''
{% extends "base.html" %}

{% block content %}
    <div class="splash">
        <div class="pure-g-r">
            <div class="pure-u-1">
                <div class="l-box splash-text">
                    <h1 class="splash-head">
                        Uma Simples Plataforma de Ensino a Distância
                    </h1>
                    <h2 class="splash-subhead">
                        O Simple MOOC visa simplificar o ensino a distância, provendo ferramentas objetivas e de fácil uso para cursos a distância.
                    </h2>
                    <p>
                        <a href="#" class="pure-button primary-button">Saiba mais</a>
                    </p>
                </div>
            </div>
        </div>
    </div>
    <div class="content">
        <div class="pure-g-r content-ribbon">
            <div class="pure-u-2-3">
                <div class="l-box">
                    <h4 class="content-subhead">Vídeo-aulas e materiais digitais</h4>
                    <h3>Publique suas aulas</h3>
                    <p>
                        O Simple MOOC tem um sistema simples e prático para que o professor disponibilize vídeo-aulas e materiais digitais como: pdf's, slides, imagens ...
                    </p>
                </div>
            </div>
            <div class="pure-u-1-3">
                <div class="l-box">
                    <img src="http://placehold.it/400x250"
                         alt="Vídeo aulas e materiais digitais.">
                </div>
            </div>
        </div>
        <div class="pure-g-r content-ribbon">
            <div class="pure-u-1-3">
                <div class="l-box">
                    <img src="http://placehold.it/400x250"
                         alt="Fórum de Dúvidas">
                </div>
            </div>
            <div class="pure-u-2-3">
                <div class="l-box">
                    <h4 class="content-subhead">Fórum de Dúvidas</h4>
                    <h3>Interaja com seus Alunos</h3>
                    <p>
                        No Simple MOOC você pode ter seu próprio sistema de fórum para que seus alunos possam interagir com você e com os outros alunos
                    </p>
                </div>
            </div>
        </div>
        <div class="pure-g-r content-ribbon">
            <div class="pure-u-2-3">
                <div class="l-box">
                    <h4 class="content-subhead">Exercícios</h4>
                    <h3>Crie exercícios para avaliar seus alunos</h3>
                    <p>
                        Você pode criar exercícios para que os alunos possam ser avaliados e todo o controle de notas e resolução dos exercícios é controlado pela plataforma, facilitando sua vida
                    </p>
                </div>
            </div>
            <div class="pure-u-1-3">
                <div class="l-box">
                    <img src="http://placehold.it/400x250"
                         alt="Exercícios">
                </div>
            </div>
        </div>
        <div class="pure-g-r content-ribbon">
            <div class="pure-u-1-3">
                <div class="l-box">
                    <img src="http://placehold.it/400x250"
                         alt="Mural de Avisos">
                </div>
            </div>
            <div class="pure-u-2-3">
                <div class="l-box">
                    <h4 class="content-subhead">Mural de Avisos</h4>
                    <h3>Envie anúncios diretamente para os alunos</h3>
                    <p>
                        Organize os avisos do seu curso de forma fácil e simples.
                    </p>
                </div>
            </div>
        </div>
    </div>
{% endblock %}
'''

# Rode o servidor ou atualize a página principal. 'home.html' será exibido sem nenhum problema. Faça o mesmo para a página de 'contato.html'.

'''
{% extends 'base.html' %}

{% block content %}
    <div class="pure-g-r content-ribbon">
        <div class="pure-u-1">
            <h1>Fale conosco</h1>
            <p>Você pode entrar em contato conosco tanto por e-mail como pelas redes sociais, abaixo seguem os links para contato:</p>
            <h4>Links</h4>
            <ul>
                <li>E-mail: <a href="mailto:contato@simplemooc.org">contato@simplemooc.org</a></li>
                <li>Twitter: <a href="https://twitter.com/simplemooc">@simplemooc</a></li>
            </ul>
        </div>
    </div>
{% endblock %}
'''


# Ajustando os links
# Os links para 'home' e 'contato' não estão funcionando. Mas isso é fácil de arrumar. No arquivo 'base.html', nos locais onde tem as marcações href="">, 'base.html' e 'contact.html', substitua-os por {% url 'home' %} e {% url 'contact' %}, respectivamente:

			# ANTES
			<a class="pure-menu-heading" href="">SIMPLE MOOC</a>

            <li class="pure-menu-selected"><a href="base.html">Início</a></li>
            <li><a href="#">Cursos</a></li>
            <li><a href="contact.html">Contato</a></li>

            # DEPOIS
            <a class="pure-menu-heading" href="{% url 'home' %}">SIMPLE MOOC</a>

            <li class="pure-menu-selected"><a href="{% url 'home' %}">Início</a></li>
            <li><a href="#">Cursos</a></li>
            <li><a href="{% url 'contact' %}">Contato</a></li>


# URL's (include e namespace)
# Até o momento, usamos o arquivo urls.py da aplicação principal. No entanto, não é nada organizado manter muita urls em um só arquivo, visto que diversas aplicações podem ser desenvolvidas no diretório 'simplemooc'. Por isso, é ideal que urls de aplicações específicas fiquem armazenadas em arquivos de urls específicos, o que deixa o código mais organizado.
# No diretório 'core', crie um arquivo urls.py.
# Neste arquivo, import: from django.conf.urls import patterns, include, url
# Copie os urlspatterns do arquivo urls.py de 'simplemooc' para o arquivo urls.py de 'core'.

#ANTES
urlpatterns = patterns('',
	url(r'^$', 'simplemooc.core.views.home', name='home'),
	url(r'^contato/$', 'simplemooc.core.views.contact', name='contact'),
    url(r'^admin/', include(admin.site.urls)),
)

#urls.py de 'simplemooc'
# namespace='core', funciona para atribuir o nome de uma mesma tag em diferentes aplicações. Por exemplo, supondo que crie uma aplicação 'fórum' e nela também crie uma página 'contato' que dou identifico como 'contact'. Namespace, nesta situação, irá ajudar a diferenciar a quem o 'contact' no arquivo HTML pertence.
urlpatterns = patterns('',
	url(r'^', include('simplemooc.core.urls', namespace='core')),
    url(r'^admin/', include(admin.site.urls)),
)

#urls.py de 'core'
urlpatterns = patterns('',
	url(r'^$', 'simplemooc.core.views.home', name='home'),
	url(r'^contato/$', 'simplemooc.core.views.contact', name='contact'),
)

# Explicando o Namespace
# Abra o arquivo 'base.html'
		# ANTES
        <a class="pure-menu-heading" href="{% url 'home' %}"
        # DEPOIS
        <a class="pure-menu-heading" href="{% url 'core:home' %}"

        # ANTES
        <li class="pure-menu-selected"><a href="{% url 'home' %}">Início</a></li>
        # DEPOIS
        <li class="pure-menu-selected"><a href="{% url 'core:home' %}">Início</a></li>

        # ANTES
        <li><a href="{% url 'contact' %}">Contato</a></
        # DEPOIS
        <li><a href="{% url 'core:contact' %}">Contato</a></

        # Rode o servidor ou atualize a página

    # Atualize o conteúdo do arquivo urls.py de 'core'
    # ANTES
    from django.conf.urls import patterns, include, url

	urlpatterns = patterns('',
		url(r'^$', 'simplemooc.core.views.home', name='home'),
		url(r'^contato/$', 'simplemooc.core.views.contact', name='contact'),
	)

	# DEPOIS
	from django.conf.urls import patterns, include, url

	urlpatterns = patterns('simplemooc.core.views',
		url(r'^$', 'home', name='home'),
		url(r'^contato/$', 'contact', name='contact'),
	)


